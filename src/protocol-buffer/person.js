// source: json-shema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Person');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Person = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.Person.displayName = 'proto.Person';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.Person.prototype.toObject = function (opt_includeInstance) {
		return proto.Person.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.Person} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.Person.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				id: jspb.Message.getFieldWithDefault(msg, 1, ''),
				firstname: jspb.Message.getFieldWithDefault(msg, 2, ''),
				lastname: jspb.Message.getFieldWithDefault(msg, 3, ''),
				ethaddres: jspb.Message.getFieldWithDefault(msg, 4, ''),
				eductxid: jspb.Message.getFieldWithDefault(msg, 5, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Person}
 */
proto.Person.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.Person();
	return proto.Person.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Person}
 */
proto.Person.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setFirstname(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setLastname(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setEthaddres(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setEductxid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Person.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.Person.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Person} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Person.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getFirstname();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getLastname();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getEthaddres();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getEductxid();
	if (f !== 0) {
		writer.writeInt64(5, f);
	}
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.Person.prototype.getId = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Person} returns this
 */
proto.Person.prototype.setId = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string firstName = 2;
 * @return {string}
 */
proto.Person.prototype.getFirstname = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Person} returns this
 */
proto.Person.prototype.setFirstname = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string lastName = 3;
 * @return {string}
 */
proto.Person.prototype.getLastname = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Person} returns this
 */
proto.Person.prototype.setLastname = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string ethAddres = 4;
 * @return {string}
 */
proto.Person.prototype.getEthaddres = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 4, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Person} returns this
 */
proto.Person.prototype.setEthaddres = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 eduCTXid = 5;
 * @return {number}
 */
proto.Person.prototype.getEductxid = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.Person} returns this
 */
proto.Person.prototype.setEductxid = function (value) {
	return jspb.Message.setProto3IntField(this, 5, value);
};
