// source: json-shema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Certificate');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Certificate = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.Certificate.displayName = 'proto.Certificate';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.Certificate.prototype.toObject = function (opt_includeInstance) {
		return proto.Certificate.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.Certificate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.Certificate.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				type: jspb.Message.getFieldWithDefault(msg, 1, ''),
				certificatetitle: jspb.Message.getFieldWithDefault(msg, 2, ''),
				unitid: jspb.Message.getFieldWithDefault(msg, 3, ''),
				unittitle: jspb.Message.getFieldWithDefault(msg, 4, ''),
				shortdescriptor: jspb.Message.getFieldWithDefault(msg, 5, ''),
				fulldescriptionuri: jspb.Message.getFieldWithDefault(
					msg,
					6,
					''
				),
				value: jspb.Message.getFieldWithDefault(msg, 7, 0),
				unitmeasurement: jspb.Message.getFieldWithDefault(msg, 8, ''),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Certificate}
 */
proto.Certificate.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.Certificate();
	return proto.Certificate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Certificate}
 */
proto.Certificate.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setType(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setCertificatetitle(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setUnitid(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setUnittitle(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setShortdescriptor(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setFulldescriptionuri(value);
				break;
			case 7:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setValue(value);
				break;
			case 8:
				var value = /** @type {string} */ (reader.readString());
				msg.setUnitmeasurement(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Certificate.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.Certificate.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Certificate.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getType();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getCertificatetitle();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getUnitid();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getUnittitle();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getShortdescriptor();
	if (f.length > 0) {
		writer.writeString(5, f);
	}
	f = message.getFulldescriptionuri();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
	f = message.getValue();
	if (f !== 0) {
		writer.writeInt64(7, f);
	}
	f = message.getUnitmeasurement();
	if (f.length > 0) {
		writer.writeString(8, f);
	}
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.Certificate.prototype.getType = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string certificateTitle = 2;
 * @return {string}
 */
proto.Certificate.prototype.getCertificatetitle = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setCertificatetitle = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string unitId = 3;
 * @return {string}
 */
proto.Certificate.prototype.getUnitid = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setUnitid = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string unitTitle = 4;
 * @return {string}
 */
proto.Certificate.prototype.getUnittitle = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 4, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setUnittitle = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string shortDescriptor = 5;
 * @return {string}
 */
proto.Certificate.prototype.getShortdescriptor = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 5, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setShortdescriptor = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string fullDescriptionURI = 6;
 * @return {string}
 */
proto.Certificate.prototype.getFulldescriptionuri = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 6, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setFulldescriptionuri = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional int64 value = 7;
 * @return {number}
 */
proto.Certificate.prototype.getValue = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setValue = function (value) {
	return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional string unitMeasurement = 8;
 * @return {string}
 */
proto.Certificate.prototype.getUnitmeasurement = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 8, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.Certificate} returns this
 */
proto.Certificate.prototype.setUnitmeasurement = function (value) {
	return jspb.Message.setProto3StringField(this, 8, value);
};
